PARSER_BEGIN(Mojica)
import java.io.*;
public class Mojica {

  public static void main(String args[]) throws ParseException,IOException {
    
    Mojica mojica = new Mojica(new FileInputStream(args[0]));
    mojica.Prog();
  }

}

PARSER_END(Mojica)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <VOID: "void">
| <MAIN: "main">
| <<>:"(">
| <RBRACE: ")">
| <LCURLY:"{">
| <RCURLY:"}">
| <INT: "int">
| <OP_ATRB: ":=" >
| <PEV: ";">
| <IF: "if">
| <DO: "do">
| <WHILE: "while">
| <RETURN: "return">
| <TRUE: "true">
| <FALSE: "false">
| <NOT: "not">
| <AND: "and">
| <OR: "or">
| <LEQ: "leq">
|<TOKEN_id :  ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_"*(["a"-"z","A"-"Z","0"-"9"])+)* >

|<OPA: ("+"|"-")>
|<OPM: ("*"|"/")>

}

TOKEN :
{
 <OPA: ("+"|"-")>
|
  < ID: >

}


void Prog () :
{}
{ <VOID> <MAIN> <LBRACE> <RBRACE>
  <LCURLY>
  VarDecl()
  SeqComandos()
  <RCURLY> 
 <EOF> 
}

void VarDecl () :
{}
{ (tipo() token_id ";") *
  
}

void Tipo () :
{}
{ <INT> | <BOOL>
 
}

void SeqComandos () :
{}
{ Comando() *
}

void Comando () :
{}
{ <skip();> | <TOKEN_id> <Comando2()> 
	|<IF> <LBRACE> <BoolExp()> <DO> <LCURLY> <SeqComandos()> <RCURLY>
	|<WHILE> <LBRACE> <BoolExp()> <RBRACE> <DO> <LCURLY> <SeqComandos()> <RCURLY>
	|<RETURN <TipoReturn()>>


void Comando2 () :
{}
{<OP_ATRIB> <Exps()> <PEV> | <LBRACE> <ListaExp> <RBRACE> <PEV>

void BoolExp () :
{}
{ <TRUE> | <FALSE> | <NOT> | <LBRACE> <BoolExp()> <RBRACE>
	|<AND> <LBRACE> <BoolExp()> <RBRACE> <LBRACE> <BoolExp()> <RBRACE>
	|<OR> <LBRACE> <BoolExp()> <RBRACE> <LBRACE> <BoolExp()> <RBRACE>
	|<LEQ> <LBRACE> <Exps()> <RBRACE> <LBRACE> <Exps()> <RBRACE>
}

void TipoReturn () :
{}
{ <Exps> | <BoolExp>
}

void Exps() :
{}
{ <Termo()> <Exps2()>  

}

void Exps2() :
{}
{ (<OPA> <TERMO> <Exps2>)*
}


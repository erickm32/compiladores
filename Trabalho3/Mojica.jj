PARSER_BEGIN(Mojica)
import java.io.*;
public class Mojica {

  public static void main(String args[]) throws ParseException,IOException {
    
    Mojica mojica = new Mojica(new FileInputStream(args[0]));
    mojica.Prog();
  }

}

PARSER_END(Mojica)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <VOID: "void">
| <MAIN: "main">
| <LBRACE:"(">
| <RBRACE: ")">
| <LCURLY:"{">
| <RCURLY:"}">
| <INT: "int">
| <BOOL: "bool">
| <OP_ATRB: ":=" >
| <PEV: ";">
| <IF: "if">
| <DO: "do">
| <WHILE: "while">
| <RETURN: "return">
| <TRUE: "true">
| <FALSE: "false">
| <NOT: "not">
| <AND: "and">
| <OR: "or">
| <LEQ: "leq">
| <TOKEN_id :  ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* (("_")*(["a"-"z","A"-"Z","0"-"9"])+)* >
| <TOKEN_numliteral: (["0"-"9"])+ ("."((["0"-"9"])+))? ("E" ("+" | "-")? ((["0"-"9"])+))?>
| <OPA: ("+"|"-")>
| <OPM: ("*"|"/")>
| <TOKEN_skip: (" " | "\t" | "\n" | "\r")>
}


void Prog () :
{}
{ <VOID> <MAIN> <LBRACE> <RBRACE>
  <LCURLY>
  VarDecl()
  SeqComandos()
  <RCURLY> 
  <EOF>
}

void VarDecl () :
{}
{ (Tipo() <TOKEN_id> <PEV>) *
  
}

void Tipo () :
{}
{ <INT> | <BOOL>
 
}

void SeqComandos () :
{}
{ (Comando())?
}

void Comando () :
{}
{ <TOKEN_skip> <LBRACE> <RBRACE> <PEV> | <TOKEN_id> Comando2() 
	|<IF> <LBRACE> BoolExp() <DO> <LCURLY> SeqComandos() <RCURLY>
	|<WHILE> <LBRACE> BoolExp() <RBRACE> <DO> <LCURLY> SeqComandos() <RCURLY>
	|<RETURN> TipoReturn()
}

void Comando2 () :
{}
{ <OP_ATRB> Exps() <PEV> | <LBRACE> ListaExp() <RBRACE> <PEV>
}

void BoolExp () :
{}
{ <TRUE> | <FALSE> | <NOT> <LBRACE> BoolExp() <RBRACE>
	|<AND> <LBRACE> BoolExp() <RBRACE> <LBRACE> BoolExp() <RBRACE>
	|<OR> <LBRACE> BoolExp() <RBRACE> <LBRACE> BoolExp() <RBRACE>
	|<LEQ> <LBRACE> Exps() <RBRACE> <LBRACE> Exps() <RBRACE>
}

void TipoReturn () :
{}
{ Exps() | BoolExp()
}

void Exps() :
{}
{ Termo() Exps2() 

}

void Exps2() :
{}
{ ( <OPA> Termo() Exps2())?
}

void Termo() :
{}
{ Fator()  Termo2()
}

void Termo2() :
{}
{(<OPM> Fator() Termo2())?
}

void Fator() :
{}
{
	<TOKEN_id> ( <LBRACE> ListaExp() <RBRACE>)?
	| <TOKEN_numliteral> 
	| <LBRACE> Exps() <RBRACE>
}


void ListaExp() :
{}
{ Exps()  ListaExp2()
}

void ListaExp2() :
{}
{ <PEV> Exps()
}

void LFunc() :
{}
{ (Func() LFunc())?
}

void Func() :
{}
{ Tipo() <TOKEN_id> <LBRACE> ListaArg() <RBRACE> <LCURLY> VarDecl() SeqComandos() <RCURLY>
}

void ListaArg() :
{}
{ Tipo() <TOKEN_id>  ListaArg2()
}

void ListaArg2() :
{}
{ <PEV> Tipo() <TOKEN_id> 
}

